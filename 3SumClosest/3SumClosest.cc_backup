#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

/**
 * Compute an array with the differences of the input with all the numbers.
 * For each element in the array, find the closest sum of two numbers in the original array,
 * skipping the index of that element.
 */

using namespace std;

class Solution {
public:
  int threeSumClosest(vector<int> &num, int target) {
    target_ = target;

    std::sort(num.begin(), num.end());

    int length = num.size();

    int distance = fabs(num[0]+num[1]+num[num.size()-1]-target);
    int result = num[0]+num[1]+num[num.size()-1];

    // Store the differences from target
    // int * diffs = new int[num.size()];
    // for( int i=0; i < length; ++i ) {
    //   diffs[i] = num[i] - target;
    // }

    // Loop on all the pairs. The vector is sorted so the
    // distance from 0 will reach a minimum.
    int lastFound = length-1;
    for( int i=0; i<length-3; ++i ) {
      for( int j=i+1; j<length-2; ++j ) {
	int previousDistance = 0;
	bool first = true;

	int partialSum = num[i]+num[j];


	std::cout << "j+1 = " << j+1 << ", lastFound = " << lastFound << std::endl;
	findBest(num, partialSum, j+1, lastFound);
	// break;

	// int lastDistance = fabs(num[i]+num[j]+num[lastFound] - target);
	// int firstDistance = fabs(num[i]+num[j]+num[j+1] - target);
	// // std::cout << "lastDistance = " << lastDistance << std::endl;
	// // std::cout << "firstDistance = " << firstDistance << std::endl;
	// if( lastDistance > 0 && firstDistance > 0 && firstDistance < distance ) {
	//   distance = firstDistance;
	//   result = num[i]+num[j]+num[j+1];
	// }
	// else if( firstDistance < 0 && lastDistance < 0 && lastDistance < distance ) {
	//   distance = lastDistance;
	//   result = num[i]+num[j]+num[lastFound];
	// }
	// else {



	//   for( int k=lastFound; k>j; --k ) {
	//     std::cout << "num["<<i<<"],num["<<j<<"],num["<<k<<"] = "
	// 	      << num[i] << ", " << num[j] << ", " << num[k] << std::endl;
	//     int tempDistance = fabs(partialSum+num[k]-target);
	//     if( previousDistance != 0 && tempDistance > previousDistance ) break;
	//     previousDistance = tempDistance;
	//     std::cout << "temp distance = " << tempDistance << std::endl;
	//     if( tempDistance < distance ) {
	//       distance = tempDistance;
	//       result = partialSum+num[k];
	//       if( tempDistance == 0 ) return result;
	//       std::cout << "temp result = " << result << std::endl;
	//       lastFound = k;
	//       first = false;
	//     }
	//     else if ( !first )
	//       break;
	//   }
	// }
      // }
      }
      // break;
    }
    return result_;
  }

  void findBest(const std::vector<int> & num, const int partialSum, const int k1, const int k2)
  {
    std::cout << "k1 = " << k1 << ", k2 = " << k2 << std::endl;
    std::cout << "partialSum = " << partialSum << std::endl;
    // return;
    int diff1 = partialSum+num[k1] - target_;
    // std::cout << "diff1 = " << diff1 << std::endl;
    int diff2 = partialSum+num[k2] - target_;
    // std::cout << "diff2 = " << diff2 << std::endl;
    if( diff1 == 0 ) result_ = partialSum+num[k1];
    else if( diff2 == 0 ) result_ = partialSum+num[k2];
    else if( k2-k1 == 1 ) {
      if( diff1*diff2 < 0 ) {
	result_ = ( fabs(diff1) < fabs(diff2) ) ? (partialSum+num[k1]) : (partialSum+num[k2]); 
      }
      else if( diff1 > 0 ) result_ = partialSum+num[k1];
      else result_ = partialSum+num[k2];
    }
    else {
      std::cout << "fabs(partialSum + num["<<(k1+k2)/2<<"] - target_) = " << fabs(partialSum + num[(k1+k2)/2] - target_) << std::endl;
      std::cout << "fabs(partialSum + num["<<(k1+k2)/2+1<<"] - target_) = " << fabs(partialSum + num[(k1+k2)/2+1] - target_) << std::endl;
      if( diff1*diff2 > 0 ) {
	if( diff1 > 0 && fabs(diff1) < distance_ ) {
	  result_ = partialSum+num[k1];
	  distance_ = fabs(diff1);
	}
	else if( fabs(diff2) < distance_ ) {
	  result_ = partialSum+num[k2];
	  distance_ = fabs(diff2);
	}
      }
      else if( fabs(partialSum + num[(k1+k2)/2] - target_) > fabs(partialSum + num[(k1+k2)/2+1] - target_) ) {
	findBest(num, partialSum, (k1+k2)/2, k2);
      }
      else {
	findBest(num, partialSum, k1, (k1+k2)/2);
      }
    }
  }

  int target_;
  int result_;
  int distance_;
};

int main()
{
  std::vector<int> num{-1, 2, 1, -4};
  // std::vector<int> num{0, 0, 0};
  // std::vector<int> num{1,2,4,8,16,32,64,128};
  // std::vector<int> num{43,75,-90,47,-49,72,17,-31,-68,-22,-21,-30,65,88,-75,23,97,-61,53,87,-3,33,20,51,-79,43,80,-9,34,-89,-7,93,43,55,-94,29,-32,-49,25,72,-6,35,53,63,6,-62,-96,-83,-73,66,-11,96,-90,-27,78,-51,79,35,-63,85,-82,-15,100,-82,1,-4,-41,-21,11,12,12,72,-82,-22,37,47,-18,61,60,55,22,-6,26,-60,-42,-92,68,45,-1,-26,5,-56,-1,73,92,-55,-20,-43,-56,-15,7,52,35,-90,63,41,-55,-58,46,-84,-92,17,-66,-23,96,-19,-44,77,67,-47,-48,99,51,-25,19,0,-13,-88,-10,-67,14,7,89,-69,-83,86,-70,-66,-38,-50,66,0,-67,-91,-65,83,42,70,-6,52,-21,-86,-87,-44,8,49,-76,86,-3,87,-32,81,-58,37,-55,19,-26,66,-89,-70,-69,37,0,19,-65,38,7,3,1,-96,96,-65,-52,66,5,-3,-87,-16,-96,57,-74,91,46,-79,0,-69,55,49,-96,80,83,73,56,22,58,-44,-40,-45,95,99,-97,-22,-33,-92,-51,62,20,70,90};

  Solution a;
  std::cout << "result = " << a.threeSumClosest(num, 1) << std::endl;
  // std::cout << "result = " << a.threeSumClosest(num, 82) << std::endl;
  // std::cout << "result = " << a.threeSumClosest(num, 284) << std::endl;

  return 0;
}
